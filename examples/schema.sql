-- Tagged way (newest). This assumes there's a houskeeper app which
-- populates bin and child values accordingly

-- Stores all events in a single table with tag and refernce to
-- "parent" if it is a derived value.
CREATE TABLE event (
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    parent integer REFERENCES event(id) ON UPDATE CASCADE ON DELETE SET NULL,
    tag smallint NOT NULL REFERENCES site_tag(id) ON UPDATE CASCADE,
    ts timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP,
    value jsonb NOT NULL
);

CREATE INDEX event_bin_all ON event(tag, ts);

-- Need to make this cleaner. This tries it for all data, even non-victron.
CREATE INDEX victron_battery_full
    ON event(tag, ts DESC)
    WHERE value->'payload'->'soc' = '100';

CREATE OR REPLACE PROCEDURE insert_distinct_event(new_tag smallint, new_value jsonb)
LANGUAGE plpgsql AS $$
DECLARE
    allow_insert BOOLEAN;
BEGIN
    -- Testaa, onko viimeisin arvo eri kuin uusi
    SELECT value <> new_value
    INTO allow_insert
    FROM event
    WHERE new_tag = tag
    ORDER BY ts DESC
    LIMIT 1;

    -- Lisää rivi, jos arvo on uusi (tai ei aiempia rivejä)
    IF COALESCE(allow_insert, TRUE) THEN
        INSERT INTO event (tag, value)
        VALUES (new_tag, new_value);
    END IF;
END;
$$;

-- Friendly indices to avoid typecasts everywhere
CREATE VIEW victron_bat AS
SELECT
    id,
    tag,
    ts,
    (value -> 'payload' -> 'soc')::numeric AS soc,
    (value -> 'payload' -> 'current')::numeric AS current,
    (value -> 'payload' -> 'voltage')::numeric AS voltage,
    (value -> 'payload' -> 'consumed_ah')::numeric AS consumed_ah,
    (value -> 'payload' -> 'temperature')::numeric AS temperature,
    (value -> 'payload' -> 'starter_voltage')::numeric AS starter_voltage
  FROM event;

CREATE VIEW victron_pv AS
SELECT
    id,
    tag,
    ts,
    (value ->> 'name') AS panel,
    (value -> 'payload' -> 'solar_power')::numeric AS solar_power,
    (value -> 'payload' -> 'battery_voltage')::numeric AS battery_voltage,
    (value -> 'payload' -> 'battery_charging_current')::numeric AS charging_current,
    (value -> 'payload' -> 'yield_today')::numeric AS yield_today
  FROM event;
